class ChessGame:
    def __init__(self):
        self.board = self.setup_board()
        self.current_player = 'white'
        self.game_over = False
        self.moves = []
        self.white_king_position = (1, 5)
        self.black_king_position = (8, 5)
    
    def setup_board(self):
        board = {}
        for row in range(1, 9):
            for col in range(1, 9):
                if row in [1, 8]:
                    if col in [1, 8]:
                        board[(row, col)] = 'rook'
                    elif col in [2, 7]:
                        board[(row, col)] = 'knight'
                    elif col in [3, 6]:
                        board[(row, col)] = 'bishop'
                    elif col == 4:
                        board[(row, col)] = 'queen'
                    else:
                        board[(row, col)] = 'king'
                elif row in [2, 7]:
                    board[(row, col)] = 'pawn'
                else:
                    board[(row, col)] = None
        return board
    
    def move_piece(self, from_square, to_square):
        if self.is_valid_move(from_square, to_square):
            piece = self.board[from_square]
            self.board[to_square] = piece
            self.board[from_square] = None
            self.update_king_position(piece, to_square)
            self.moves.append((from_square, to_square))
            self.switch_players()
    
    def is_valid_move(self, from_square, to_square):
        piece = self.board[from_square]
        if piece is None:
            return False
        if self.current_player == 'white' and piece.islower():
            return False
        if self.current_player == 'black' and piece.isupper():
            return False
        if piece.lower() == 'p':
            return self.is_valid_pawn_move(from_square, to_square)
        elif piece.lower() == 'r':
            return self.is_valid_rook_move(from_square, to_square)
        elif piece.lower() == 'n':
            return self.is_valid_knight_move(from_square, to_square)
        elif piece.lower() == 'b':
            return self.is_valid_bishop_move(from_square, to_square)
        elif piece.lower() == 'q':
            return self.is_valid_queen_move(from_square, to_square)
        elif piece.lower() == 'k':
            return self.is_valid_king_move(from_square, to_square)
        else:
            return False
    
    def is_valid_pawn_move(self, from_square, to_square):
        # Check if the move is valid based on the direction of the pawn's movement
        piece = self.board[from_square]
        if piece.isupper():
            direction = -1
            start_row = 7
        else:
            direction = 1
            start_row = 2
        from_row, from_col = from_square
        to_row, to_col = to_square
        if to_col == from_col and self.board[to_square] is None:
            # Move forward one square
            if to_row == from_row + direction:
                return True
            # Move forward two squares from the starting position
            if to_row == from_row + 2*direction and from_row == start_row and self.board[(from_row+direction, from_col)] is None:
                return True
        elif abs(to_col - from_col) == 1 and self.board[to_square] is not None:
            # Capture a piece diagon
         if to_row == from_row + direction:
            return True
        # En passant
        if from_row == start_row + direction and self.moves and self.moves[-1][1] == (start_row + direction, to_col) and self.moves[-1][0] == (start_row, to_col) and self.board[(start_row, to_col)] == piece.lower():
            return True
    return False

def is_valid_rook_move(self, from_square, to_square):
    from_row, from_col = from_square
    to_row, to_col = to_square
    if from_row == to_row:
        # Move horizontally
        if from_col < to_col:
            # Move right
            for col in range(from_col+1, to_col):
                if self.board[(from_row, col)] is not None:
                    return False
        else:
            # Move left
            for col in range(from_col-1, to_col, -1):
                if self.board[(from_row, col)] is not None:
                    return False
        return True
    elif from_col == to_col:
        # Move vertically
        if from_row < to_row:
            # Move down
            for row in range(from_row+1, to_row):
                if self.board[(row, from_col)] is not None:
                    return False
        else:
            # Move up
            for row in range(from_row-1, to_row, -1):
                if self.board[(row, from_col)] is not None:
                    return False
        return True
    else:
        # Invalid move
        return False

def is_valid_knight_move(self, from_square, to_square):
    from_row, from_col = from_square
    to_row, to_col = to_square
    if (abs(to_row - from_row) == 2 and abs(to_col - from_col) == 1) or (abs(to_row - from_row) == 1 and abs(to_col - from_col) == 2):
        return True
    else:
        return False

def is_valid_bishop_move(self, from_square, to_square):
    from_row, from_col = from_square
    to_row, to_col = to_square
    if abs(to_row - from_row) == abs(to_col - from_col):
        # Move diagonally
        if from_row < to_row:
            # Move down
            if from_col < to_col:
                # Move down and right
                row = from_row + 1
                for col in range(from_col+1, to_col):
                    if self.board[(row, col)] is not None:
                        return False
                    row += 1
            else:
                # Move down and left
                row = from_row + 1
                for col in range(from_col-1, to_col, -1):
                    if self.board[(row, col)] is not None:
                        return False
                    row += 1
        else:
            # Move up
            if from_col < to_col:
                # Move up and right
                row = from_row - 1
                for col in range(from_col+1, to_col):
                    if self.board[(row, col)] is not None:
                        return False
                    row -= 1
            else:
                # Move up and left
                row = from_row - 1
                for col in range(from_col-1, to_col, -1):
                    if self.board[(row, col)] is not None:
                        return False
                    row -= 1
        return True
    else:
        # Invalid move
        return False
def is_valid_queen_move(self, from_square, to_square):
    if self.is_valid_rook_move(from_square, to_square) or self.is_valid_bishop_move(from_square, to_square):
        return True
    else:
        return False

def is_valid_king_move(self, from_square, to_square):
    from_row, from_col = from_square
    to_row, to_col = to_square
    if abs(to_row - from_row) <= 1 and abs(to_col - from_col) <= 1:
        return True
    else:
        return False

def is_valid_castling_move(self, from_square, to_square):
    from_row, from_col = from_square
    to_row, to_col = to_square
    if from_row != to_row or abs(from_col - to_col) != 2:
        # Invalid move
        return False
    
    # Check if the king and rook have moved before
    if self.board[from_square] == 'K':
        if from_square != (7, 4) or self.white_king_moved:
            return False
        if to_col == 6:
            # Kingside castling
            if self.board[(7, 7)] != 'R' or self.white_kingside_rook_moved:
                return False
            if any(self.board[(7, col)] is not None for col in range(5, 7)):
                return False
            if self.is_square_attacked((7, 4), 'black') or self.is_square_attacked((7, 5), 'black') or self.is_square_attacked((7, 6), 'black'):
                return False
        elif to_col == 2:
            # Queenside castling
            if self.board[(7, 0)] != 'R' or self.white_queenside_rook_moved:
                return False
            if any(self.board[(7, col)] is not None for col in range(1, 4)):
                return False
            if self.is_square_attacked((7, 4), 'black') or self.is_square_attacked((7, 3), 'black') or self.is_square_attacked((7, 2), 'black'):
                return False
        else:
            return False
    elif self.board[from_square] == 'k':
        if from_square != (0, 4) or self.black_king_moved:
            return False
        if to_col == 6:
            # Kingside castling
           if self.board[(0, 7)] != 'r' or self.black_kingside_rook_moved:
                          def is_valid_en_passant_move(self, from_square, to_square):
                              from_row, from_col = from_square
    to_row, to_col = to_square
    direction = 1 if self.current_player == 'white' else -1
    if from_row != to_row or abs(from_col - to_col) != 1:
        return False
    if self.current_player == 'white':
        en_passant_row = 4
    else:
        en_passant_row = 5
    en_passant_col = to_col
    en_passant_square = (en_passant_row, en_passant_col)
    if self.board[en_passant_square] != 'p':
        return False
    last_move_from, last_move_to = self.moves[-1]
    if last_move_to != en_passant_square or abs(last_move_from[0] - last_move_to[0]) != 2:
        return False
    return True


    

    direction = 1 if self.current_player == 'white' else -1
    if from_row != to_row or abs(from_col - to_col) != 1:
        # Invalid move
        return False
    
    if self.board[from_square] == 'P' and from_row == 4:
        if to_row != 5:
            return False
        if self.last_move[1][0] != 6 or abs(self.last_move[1][1] - to_col) != 1:
            return False
        return True
    elif self.board[from_square] == 'p' and from_row == 3:
        if to_row != 2:
            return False
        if self.last_move[1][0] != 1 or abs(self.last_move[1][1] - to_col) != 1:
            return False
        return True
    else:
        return False

def is_square_attacked(self, square, color):
    """
    Returns True if the given square is attacked by a piece of the given color.
    """
    for row in range(8):
        for col in range(8):
            piece = self.board[(row, col)]
            if piece is None or (color == 'white' and piece.islower()) or (color == 'black' and piece.isupper()):
                # This is an empty square or a square with a piece of the opposite color.
                continue
            if piece.lower() == 'p':
                # Pawn attack
                if color == 'white' and (row == square[0] - 1) and (col == square[1] + 1 or col == square[1] - 1):
                    return True
                elif color == 'black' and (row == square[0] + 1) and (col == square[1] + 1 or col == square[1] - 1):
                    return True
            elif piece.lower() == 'r':
                # Rook attack
                if self.is_valid_rook_move((row, col), square):
                    return True
            elif piece.lower() == 'n':
                # Knight attack
                if self.is_valid_knight_move((row, col), square):
                    return True
            elif piece.lower() == 'b':
                # Bishop attack
                if self.is_valid_bishop_move((row, col), square):
                    return True
            elif piece.lower() == 'q':
                # Queen attack
                if self.is_valid_queen_move((row, col), square):
                    return True
            elif piece.lower() == 'k':
                # King attack
                if self.is_valid_king_move((row, col), square):
                    return True
    return False

def get_possible_moves(self, color):
    """
    Returns a list of all possible moves for the given color.
    """
    moves = []
    for row in range(8):
        for col in range(8):
            piece = self.board[(row, col)]
            if piece is None or (color == 'white' and piece.islower()) or (color == 'black' and piece.isupper()):
                # This is an empty square or a square with a piece of the opposite color.
                continue
            if piece.lower() == 'p':
                # Pawn moves
                if color == 'white':
                    if self.board[(row-1, col)] is None:
                        moves.append(((row, col), (row-1, col)))
                        if row == 6 and self.board[(row-2, col)] is None:
                           moves.append(((row, col), (row-2, col)))
                    if col > 0 and self.board[(row-1, col-1)] is not None and self.board[(row-1, col-1)].isupper():
                        moves.append(((row, col), (row-1, col-1)))
                    if col < 7 and self.board[(row-1, col+1)] is not None and self.board[(row-1, col+1)].isupper():
                        moves.append(((row, col), (row-1, col+1)))
                    if self.is_valid_en_passant_move((row, col), (row-1, col-1)):
                        moves.append(((row, col), (row-1, col-1)))
                    if self.is_valid_en_passant_move((row, col), (row-1, col+1)):
                        moves.append(((row, col), (row-1, col+1)))
                elif color == 'black':
                    if self.board[(row+1, col)] is None:
                        moves.append(((row, col), (row+1, col)))
                        if row == 1 and self.board[(row+2, col)] is None:
                            moves.append(((row, col), (row+2, col)))
                    if col > 0 and self.board[(row+1, col-1)] is not None and self.board[(row+1, col-1)].islower():
                        moves.append(((row, col), (row+1, col-1)))
                    if col < 7 and self.board[(row+1, col+1)] is not None and self.board[(row+1, col+1)].islower():
                        moves.append(((row, col), (row+1, col+1)))
                    if self.is_valid_en_passant_move((row, col), (row+1, col-1)):
                        moves.append(((row, col), (row+1, col-1)))
                    if self.is_valid_en_passant_move((row, col), (row+1, col+1)):
                        moves.append(((row, col), (row+1, col+1)))
            elif piece.lower() == 'r':
                # Rook moves
                for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
                    for i in range(1, 8):
                        if self.is_valid_move((row, col), (row+dr*i, col+dc*i)):
                            moves.append(((row, col), (row+dr*i, col+dc*i)))
                            if self.board[(row+dr*i, col+dc*i)] is not None:
                                break
            elif piece.lower() == 'n':
                # Knight moves
                for dr, dc in [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (-1, 2), (1, -2), (-1, -2)]:
                    if self.is_valid_move((row, col), (row+dr, col+dc)):
                        moves.append(((row, col), (row+dr, col+dc)))
            elif piece.lower() == 'b':
                # Bishop moves
                for dr, dc in [(1, 1), (-1, 1), (1, -1), (-1, -1)]:
                    for i in range(1, 8):
                        if self.is_valid_move((row, col), (row+dr*i, col+dc*i)):
                         moves.append(((row, col), (row+dr*i, col+dc*i)))
                    if any(self.board[(0, col)] is not None for col in range(5, 7)):
                       return False
                    if self.is_square_attacked((0, 4), 'white') or self.is_square_attacked((0, 5), 'white') or self.is_square_attacked((0, 6), 'white'):
                       return False
                    elif to_col == 2:
                      # Queenside castling
                      if self.board[(0, 0)] != 'r' or self.black_queenside_rook_moved:
                        return False
                      if any(self.board[(0, col)] is not None for col in range(1, 4)):
                        return False
                      if self.is_square_attacked((0, 4), 'white') or self.is_square_attacked((0, 3), 'white') or self.is_square_attacked((0, 2), 'white'):
                        return False
                      else:
                           return False
    
                      return
                    (col), (row+dr*i, col+dc*i)
                if self.board[(row+dr*i, col+dc*i)] is not None:
                                break
            elif piece.lower() == 'q':
                # Queen moves
                for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (-1, 1), (1, -1), (-1, -1)]:
                    for i in range(1, 8):
                        if self.is_valid_move((row, col), (row+dr*i, col+dc*i)):
                            moves.append(((row, col), (row+dr*i, col+dc*i)))
                            if self.board[(row+dr*i, col+dc*i)] is not None:
                                break
            elif piece.lower() == 'k':
                # King moves
                for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (-1, 1), (1, -1), (-1, -1)]:
                    if self.is_valid_move((row, col), (row+dr, col+dc)):
                        moves.append(((row, col), (row+dr, col+dc)))
                if color == 'white' and not self.white_king_moved:
                    if not any(self.board[(7, i)] is not None for i in range(1, 5)):
                        if self.board[(7, 0)] == 'R':
                            if not self.is_in_check((7, 2)) and not self.is_in_check((7, 3)):
                                moves.append(((7, 4), (7, 2)))
                    if not any(self.board[(7, i)] is not None for i in range(5, 7)):
                        if self.board[(7, 7)] == 'R':
                            if not self.is_in_check((7, 5)) and not self.is_in_check((7, 6)):
                                moves.append(((7, 4), (7, 6)))
                elif color == 'black' and not self.black_king_moved:
                    if not any(self.board[(0, i)] is not None for i in range(1, 5)):
                        if self.board[(0, 0)] == 'r':
                            if not self.is_in_check((0, 2)) and not self.is_in_check((0, 3)):
                                moves.append(((0, 4), (0, 2)))
                    if not any(self.board[(0, i)] is not None for i in range(5, 7)):
                        if self.board[(0, 7)] == 'r':
                            if not self.is_in_check((0, 5)) and not self.is_in_check((0, 6)):
                                moves.append(((0, 4), (0, 6)))
    return moves

def is_valid_move(self, start_pos, end_pos):
    """
    Check if a move is valid.
    """
    # Check if start and end positions are on the board
    if not self.is_on_board(start_pos) or not self.is_on_board(end_pos):
        return False
    
    # Check if the start position has a piece
    if self.board[start_pos] is None:
        return False
    
    # Check if the end position has a piece of the same color
    if self.board[end_pos] is not None and self.board[start_pos].isupper() == self.board[end_pos].isupper():
        return False
    
   
    # Check if the move is valid for the specific piece
    if not self.is_valid_move_for_piece(start_pos, end_pos):
        return False
    
    # Check if the move results in the same board position
    if start_pos == end_pos:
        return False
    
    # Check if the move is obstructed
    if not self.is_unobstructed(start_pos, end_pos):
        return False
    
    # Check if the move results in the same board position
    if start_pos == end_pos:
        return False
    
    # Check if the move is not allowed due to the current check status
    if self.is_in_check_after_move(start_pos, end_pos):
        return False
    
    # All checks passed, the move is valid
    return True

def is_valid_move_for_piece(self, start_pos, end_pos):
    """
    Check if the move is valid for the piece at the start position.
    """
    piece = self.board[start_pos]
    row, col = start_pos
    
    if piece.lower() == 'p':
        # Pawn moves
        if col == end_pos[1]:
            if piece.isupper():
                if end_pos[0] == row-1:
                    if self.board[end_pos] is None:
                        return True
                if row == 6 and end_pos[0] == 4:
                    if self.board[(5, col)] is None and self.board[end_pos] is None:
                        return True
            else:
                if end_pos[0] == row+1:
                    if self.board[end_pos] is None:
                        return True
                if row == 1 and end_pos[0] == 3:
                    if self.board[(2, col)] is None and self.board[end_pos] is None:
                        return True
        else:
            # En passant
            if piece.isupper():
                if row == 3 and end_pos == (2, self.en_passant_target):
                    if self.board[(3, self.en_passant_target)].lower() == 'p':
                        return True
            else:
                if row == 4 and end_pos == (5, self.en_passant_target):
                    if self.board[(4, self.en_passant_target)].lower() == 'p':
                        return True
    elif piece.lower() == 'r':
        # Rook moves
        if row == end_pos[0] or col == end_pos[1]:
            return True
    elif piece.lower() == 'n':
        # Knight moves
        if (abs(row-end_pos[0]), abs(col-end_pos[1])) in [(1, 2), (2, 1)]:
            return True
    elif piece.lower() == 'b':
        # Bishop moves
        if abs(row-end_pos[0]) == abs(col-end_pos[1]):
            return True
    elif piece.lower() == 'q':
        # Queen moves
        if row == end_pos[0] or col == end_pos[1] or abs(row-end_pos[0]) == abs(col-end_pos[1]):
            return True
    elif piece.lower() == 'k':
        # King moves
        if abs(row-end_pos[0]) <= 1 and abs(col-end_pos[1]) <= 1:
            return True
        # Castling
        if not self.is_in_check(start_pos) and not self.is_in_check(end_pos):
            if start_pos == (7, 4) and end_pos == (7, 2) and not self.white_king_moved:
                if self.board[(7, 0)] == 'R' and not any(self.board)[(7, i)]:
                 def make_move(self, start_pos, end_pos):
            """
                 Make the move from start_pos to end_pos.
                 """
        piece = self.board[start_pos]
        self.board[start_pos] = None
        self.board[end_pos] = piece
        
        # Update castling and en passant flags
        if piece.lower() == 'k':
            self.white_king_moved = True
        elif piece.lower() == 'r':
            if start_pos == (7, 0):
                self.white_queen_rook_moved = True
            elif start_pos == (7, 7):
                self.white_king_rook_moved = True
        elif piece.lower() == 'p':
            if end_pos[0] == 0 or end_pos[0] == 7:
                # Promote pawn to queen by default
                self.board[end_pos] = 'Q'
        
        if abs(start_pos[0] - end_pos[0]) == 2 and piece.lower() == 'p':
            # Update en passant target square
            self.en_passant_target = end_pos[1]
        else:
            self.en_passant_target = None
            
        # Check for castling move
        if piece.lower() == 'k' and abs(start_pos[1] - end_pos[1]) == 2:
            if end_pos[1] == 2:
                # Queen side castling
                self.board[(7, 3)] = self.board[(7, 0)]
                self.board[(7, 0)] = None
            elif end_pos[1] == 6:
                # King side castling
                self.board[(7, 5)] = self.board[(7, 7)]
                self.board[(7, 7)] = None
            
    def is_in_check(self, pos):
        """
        Check if the king at pos is in check.
        """
        king = self.board[pos]
        for i in range(8):
            for j in range(8):
                if self.board[(i, j)] is not None and self.board[(i, j)].isupper() != king.isupper():
                    if self.is_valid_move((i, j), pos):
                        return True
        return False
    
    def is_in_check_after_move(self, start_pos, end_pos):
        """
        Check if the move from start_pos to end_pos would result in the king being in check.
        """
        self.make_move(start_pos, end_pos)
        king_pos = None
        for i in range(8):
            for j in range(8):
                if self.board[(i, j)] == 'k' and king_pos is None:
                    king_pos = (i, j)
                elif self.board[(i, j)] == 'k' and king_pos is not None:
                    raise Exception('Multiple kings found on the board.')
        in_check = self.is_in_check(king_pos)
        self.undo_move(start_pos, end_pos)
        return in_check
    
    def is_in_checkmate(self):
        """
        Check if the current player is in checkmate.
        """
        for i in range(8):
            for j in range(8):
                if self.board[(i, j)] is not None and self.board[(i, j)].isupper() == self.white_to_move:
                    for k in range(8):
                        for l in range(8):
                            if self.is_valid_move((i, j), (k, l)):
                                if not self.is_in_check_after_move((i, j), (k, l)):
                                    return False
        return
import random

class ChessGame:
    ...
    
    def game_loop(self):
        """
        Main game loop.
        """
        print('Welcome to Chess!\n')
        while True:
            self.print_board()
            if self.is_in_checkmate():
                print('Checkmate!')
                return
            elif self.is_in_stalemate():
                print('Stalemate!')
                return
            elif self.is_in_draw():
                print('Draw!')
                return
            
            if self.white_to_move:
                move = input('White to move. Enter your move: ')
            else:
                move = self.get_bot_move()
                print(f'Black plays {move}')
                
            try:
                start_pos, end_pos = self.parse_move(move)
                if not self.is_valid_move(start_pos, end_pos):
                    print('Invalid move. Try again.')
                    continue
                elif self.is_in_check_after_move(start_pos, end_pos):
                    print('Illegal move: King is in check.')
                    continue
                self.make_move(start_pos, end_pos)
            except:
                print('Invalid move. Try again.')
                continue
            
            self.white_to_move = not self.white_to_move
            
    def get_bot_move(self):
        """
        Generate a random move for the bot.
        """
        while True:
            start_pos = (random.randint(0, 7), random.randint(0, 7))
            end_pos = (random.randint(0, 7), random.randint(0, 7))
            if self.is_valid_move(start_pos, end_pos):
                return self.format_move(start_pos, end_pos)
if __name__ == '__main__':
    game = ChessGame()
    game.game_loop()
